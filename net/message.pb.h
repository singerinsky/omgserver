// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class SoccerPlayerInfoRequest;
class SoccerPlayerInfoResponse;

enum MSG_ACTION_TYPE {
  MSG_REQUEST = 0,
  MSG_RESPONSE = 1,
  MSG_NOTIFY = 2
};
bool MSG_ACTION_TYPE_IsValid(int value);
const MSG_ACTION_TYPE MSG_ACTION_TYPE_MIN = MSG_REQUEST;
const MSG_ACTION_TYPE MSG_ACTION_TYPE_MAX = MSG_NOTIFY;
const int MSG_ACTION_TYPE_ARRAYSIZE = MSG_ACTION_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* MSG_ACTION_TYPE_descriptor();
inline const ::std::string& MSG_ACTION_TYPE_Name(MSG_ACTION_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    MSG_ACTION_TYPE_descriptor(), value);
}
inline bool MSG_ACTION_TYPE_Parse(
    const ::std::string& name, MSG_ACTION_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MSG_ACTION_TYPE>(
    MSG_ACTION_TYPE_descriptor(), name, value);
}
enum MessageType {
  MSG_SOCCER_PLAYER_INFO = 1
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = MSG_SOCCER_PLAYER_INFO;
const MessageType MessageType_MAX = MSG_SOCCER_PLAYER_INFO;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class SoccerPlayerInfoRequest : public ::google::protobuf::Message {
 public:
  SoccerPlayerInfoRequest();
  virtual ~SoccerPlayerInfoRequest();
  
  SoccerPlayerInfoRequest(const SoccerPlayerInfoRequest& from);
  
  inline SoccerPlayerInfoRequest& operator=(const SoccerPlayerInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SoccerPlayerInfoRequest& default_instance();
  
  void Swap(SoccerPlayerInfoRequest* other);
  
  // implements Message ----------------------------------------------
  
  SoccerPlayerInfoRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SoccerPlayerInfoRequest& from);
  void MergeFrom(const SoccerPlayerInfoRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:SoccerPlayerInfoRequest)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 player_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static SoccerPlayerInfoRequest* default_instance_;
};
// -------------------------------------------------------------------

class SoccerPlayerInfoResponse : public ::google::protobuf::Message {
 public:
  SoccerPlayerInfoResponse();
  virtual ~SoccerPlayerInfoResponse();
  
  SoccerPlayerInfoResponse(const SoccerPlayerInfoResponse& from);
  
  inline SoccerPlayerInfoResponse& operator=(const SoccerPlayerInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SoccerPlayerInfoResponse& default_instance();
  
  void Swap(SoccerPlayerInfoResponse* other);
  
  // implements Message ----------------------------------------------
  
  SoccerPlayerInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SoccerPlayerInfoResponse& from);
  void MergeFrom(const SoccerPlayerInfoResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 player_id = 1;
  inline bool has_player_id() const;
  inline void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  inline ::google::protobuf::int32 player_id() const;
  inline void set_player_id(::google::protobuf::int32 value);
  
  // required string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  
  // required int32 age = 3;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 3;
  inline ::google::protobuf::int32 age() const;
  inline void set_age(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:SoccerPlayerInfoResponse)
 private:
  inline void set_has_player_id();
  inline void clear_has_player_id();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_age();
  inline void clear_has_age();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* player_name_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::int32 age_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static SoccerPlayerInfoResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// SoccerPlayerInfoRequest

// required int32 player_id = 1;
inline bool SoccerPlayerInfoRequest::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoccerPlayerInfoRequest::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoccerPlayerInfoRequest::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoccerPlayerInfoRequest::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 SoccerPlayerInfoRequest::player_id() const {
  return player_id_;
}
inline void SoccerPlayerInfoRequest::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// -------------------------------------------------------------------

// SoccerPlayerInfoResponse

// required int32 player_id = 1;
inline bool SoccerPlayerInfoResponse::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoccerPlayerInfoResponse::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoccerPlayerInfoResponse::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoccerPlayerInfoResponse::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 SoccerPlayerInfoResponse::player_id() const {
  return player_id_;
}
inline void SoccerPlayerInfoResponse::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
}

// required string player_name = 2;
inline bool SoccerPlayerInfoResponse::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SoccerPlayerInfoResponse::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SoccerPlayerInfoResponse::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SoccerPlayerInfoResponse::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& SoccerPlayerInfoResponse::player_name() const {
  return *player_name_;
}
inline void SoccerPlayerInfoResponse::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void SoccerPlayerInfoResponse::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void SoccerPlayerInfoResponse::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SoccerPlayerInfoResponse::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* SoccerPlayerInfoResponse::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 age = 3;
inline bool SoccerPlayerInfoResponse::has_age() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SoccerPlayerInfoResponse::set_has_age() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SoccerPlayerInfoResponse::clear_has_age() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SoccerPlayerInfoResponse::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 SoccerPlayerInfoResponse::age() const {
  return age_;
}
inline void SoccerPlayerInfoResponse::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< MSG_ACTION_TYPE>() {
  return MSG_ACTION_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< MessageType>() {
  return MessageType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
